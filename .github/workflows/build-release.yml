name: Build and Release Electron App

permissions:
  contents: write

on:
  push:
    branches: [ main ]

jobs:
  build-and-release:
    name: Build and Release on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Prepare JDK for Liquibase
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p liquibase
          cd liquibase

          set +o pipefail
          ALL_URLS=$(curl -fsSL https://api.github.com/repos/adoptium/temurin21-binaries/releases/latest \
            | tr -d '\r' \
            | sed -n 's/.*"browser_download_url": "\(.*\)".*/\1/p')
          set -o pipefail

          case "${{ matrix.os }}" in
            "windows-latest")
              echo "üîπ Fetching latest JDK 21 for Windows (x64)..."
              ASSET_URL=$(echo "$ALL_URLS" | grep -i 'jdk_.*x64_windows.*hotspot.*\.zip' | head -n 1)
              [ -z "${ASSET_URL:-}" ] && { echo "‚ùå JDK URL not found (Windows)"; echo "$ALL_URLS" | head -n 50; exit 1; }
              echo "‚Üí $ASSET_URL"
              curl -fsSL -o jdk.zip "$ASSET_URL"
              
              # ‚úÖ PowerShellÎ°ú ZIP Ìï¥Ï†ú (tar ÎåÄÏã†)
              powershell -Command "Expand-Archive -Path 'jdk.zip' -DestinationPath '.'"
              
              rm -f jdk.zip
              mv jdk-21* jdk21_win32
              ;;

          esac

          cd ..
          echo "‚úÖ Liquibase JDK contents:"
          ls -la liquibase

      - name: Build with Electron Forge
        run: npm run make

      - name: Zip build artifacts (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          zip -r "${{ matrix.os }}.zip" out/

      - name: Zip build artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (Test-Path .\windows-latest.zip) { Remove-Item .\windows-latest.zip -Force }
          Compress-Archive -Path .\out\* -DestinationPath .\windows-latest.zip -Force

      - name: Create GitHub Release (create once on Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Release v${{ github.run_number }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build zip to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          files: ${{ matrix.os }}.zip
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
